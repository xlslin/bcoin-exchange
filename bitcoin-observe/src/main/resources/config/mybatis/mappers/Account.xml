<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="account">

	<!-- 用于select查询公用抽取的列 -->
	<sql id="accountColumns">
    	<if test="null!=id">
    		and ID = #{id}
    	</if>
    	<if test="null!=address">
    		and ADDRESS = #{address}
    	</if>
    	<if test="null!=coinType">
    		and COIN_TYPE = #{coinType}
    	</if>
    	<if test="null!=totalIn">
    		and TOTAL_IN = #{totalIn}
    	</if>
    	<if test="null!=totalOut">
    		and TOTAL_OUT = #{totalOut}
    	</if>
    	<if test="null!=balance">
    		and BALANCE = #{balance}
    	</if>
    	<if test="null!=frozenAmount">
    		and FROZEN_AMOUNT = #{frozenAmount}
    	</if>
    	<if test="null!=status">
    		and STATUS = #{status}
    	</if>
    	<if test="null!=createTime">
    		and CREATE_TIME = #{createTime}
    	</if>
    	<if test="null!=modifyTime">
    		and MODIFY_TIME = #{modifyTime}
    	</if>
	</sql>
	
	<sql id="accountSetColumns">
		    <if test="null!=id">
		    ID = #{id},
		    </if>
		    <if test="null!=address">
		    ADDRESS = #{address},
		    </if>
		    <if test="null!=coinType">
		    COIN_TYPE = #{coinType},
		    </if>
		    <if test="null!=totalIn">
		    TOTAL_IN = #{totalIn},
		    </if>
		    <if test="null!=totalOut">
		    TOTAL_OUT = #{totalOut},
		    </if>
		    <if test="null!=balance">
		    BALANCE = #{balance},
		    </if>
		    <if test="null!=frozenAmount">
		    FROZEN_AMOUNT = #{frozenAmount},
		    </if>
		    <if test="null!=status">
		    STATUS = #{status},
		    </if>
		    <if test="null!=createTime">
		    CREATE_TIME = #{createTime},
		    </if>
		    <if test="null!=modifyTime">
		    MODIFY_TIME = #{modifyTime},
		    </if>
	</sql>

	<resultMap id="accountResultMap" type="com.sharingif.blockchain.bitcoin.account.model.entity.Account">
        <result property="id" column="ID"/>
        <result property="address" column="ADDRESS"/>
        <result property="coinType" column="COIN_TYPE"/>
        <result property="totalIn" column="TOTAL_IN"/>
        <result property="totalOut" column="TOTAL_OUT"/>
        <result property="balance" column="BALANCE"/>
        <result property="frozenAmount" column="FROZEN_AMOUNT"/>
        <result property="status" column="STATUS"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="modifyTime" column="MODIFY_TIME"/>
	</resultMap>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert">
        INSERT INTO ACCOUNT (
        	ID
        	,ADDRESS
        	,COIN_TYPE
        	,TOTAL_IN
        	,TOTAL_OUT
        	,BALANCE
        	,FROZEN_AMOUNT
        	,STATUS
        	,CREATE_TIME
        	,MODIFY_TIME
        ) VALUES (
        	#{id}
        	,#{address}
        	,#{coinType}
        	,#{totalIn}
        	,#{totalOut}
        	,#{balance}
        	,#{frozenAmount}
        	,#{status}
        	,#{createTime}
        	,#{modifyTime}
        )
	</insert>
	
	<delete id="deleteById">
	    DELETE FROM
	    	ACCOUNT 
	    WHERE
	    ID = #{id} 
    </delete>
    
    <delete id="deleteByCondition">
	    DELETE FROM
	    	ACCOUNT 
	    WHERE
	    	1=1
		    <include refid="accountColumns" />
    </delete>
    
	<update id="updateById">
	    UPDATE
	    	ACCOUNT 
        <set>
	        <include refid="accountSetColumns" />
		</set>
	    WHERE
	    ID = #{id} 
	</update>
	
    <select id="queryById" resultMap="accountResultMap">
		SELECT
			ID
			,ADDRESS
			,COIN_TYPE
			,TOTAL_IN
			,TOTAL_OUT
			,BALANCE
			,FROZEN_AMOUNT
			,STATUS
			,CREATE_TIME
			,MODIFY_TIME
		FROM
			ACCOUNT 
		WHERE 
			ID = #{id} 
	</select>
	
	<select id="queryList" resultMap="accountResultMap">
		SELECT
			ID
			,ADDRESS
			,COIN_TYPE
			,TOTAL_IN
			,TOTAL_OUT
			,BALANCE
			,FROZEN_AMOUNT
			,STATUS
			,CREATE_TIME
			,MODIFY_TIME
		FROM
			ACCOUNT
		WHERE
			1=1
			<include refid="accountColumns" />
		ORDER BY
			ID
	</select>
	
	<select id="queryAll" resultMap="accountResultMap">
		SELECT
			ID
			,ADDRESS
			,COIN_TYPE
			,TOTAL_IN
			,TOTAL_OUT
			,BALANCE
			,FROZEN_AMOUNT
			,STATUS
			,CREATE_TIME
			,MODIFY_TIME
		FROM
			ACCOUNT 
		ORDER BY
			ID
	</select>
	
	<select id="queryPaginationListCount" resultType="Integer">
		SELECT
			COUNT(0)
		FROM
			ACCOUNT 
		WHERE
			1=1 
			<include refid="accountColumns" />
	</select>
	
	<select id="queryPaginationList" parameterType="PaginationCondition" resultMap="accountResultMap">
		SELECT
			ID
			,ADDRESS
			,COIN_TYPE
			,TOTAL_IN
			,TOTAL_OUT
			,BALANCE
			,FROZEN_AMOUNT
			,STATUS
			,CREATE_TIME
			,MODIFY_TIME
		FROM
			ACCOUNT
		WHERE
			1=1
			<include refid="accountColumns" />
		ORDER BY
			ID
	</select>

	<update id="updateAddTotalInBalanceByAddressCoinType">
		UPDATE
		ACCOUNT
		SET
		TOTAL_IN = TOTAL_IN + #{balance}
		,BALANCE = BALANCE + #{balance}
		WHERE
			ADDRESS = #{address}
		AND
			COIN_TYPE = #{coinType}
	</update>

	<update id="updateSubTotalOutBalanceByAddressCoinType">
		UPDATE
		ACCOUNT
		SET
		TOTAL_OUT = TOTAL_OUT + #{balance}
		,BALANCE = BALANCE - #{balance}
		WHERE
			ADDRESS = #{address}
		AND
			COIN_TYPE = #{coinType}
	   	AND
	   		BALANCE >= #{balance}
	</update>

	<update id="updateSubBalanceFrozenAmountByAddressCoinType">
		UPDATE
		ACCOUNT
		SET
		BALANCE = BALANCE - #{balance}
		,FROZEN_AMOUNT = FROZEN_AMOUNT + #{balance}
		WHERE
			ADDRESS = #{address}
		AND
			COIN_TYPE = #{coinType}
		AND
			BALANCE >= #{balance}
	</update>

	<update id="updateAddBalanceFrozenAmountByAddressCoinType">
		UPDATE
		ACCOUNT
		SET
		BALANCE = BALANCE + #{balance}
		,FROZEN_AMOUNT = FROZEN_AMOUNT - #{balance}
		WHERE
			ADDRESS = #{address}
		AND
			COIN_TYPE = #{coinType}
		AND
			FROZEN_AMOUNT >= #{balance}
	</update>

	<update id="updateSubFrozenAmountTotalOutByAddressCoinType">
		UPDATE
		ACCOUNT
		SET
		FROZEN_AMOUNT = FROZEN_AMOUNT - #{frozenAmount}
		,TOTAL_OUT = TOTAL_OUT + #{frozenAmount}
		WHERE
			ADDRESS = #{address}
		AND
			COIN_TYPE = #{coinType}
		AND
			FROZEN_AMOUNT >= #{frozenAmount}
	</update>

	<select id="queryPaginationListOrderByBalanceAsc" parameterType="PaginationCondition" resultMap="accountResultMap">
		SELECT
		ID
		,ADDRESS
		,COIN_TYPE
		,TOTAL_IN
		,TOTAL_OUT
		,BALANCE
		,FROZEN_AMOUNT
		,STATUS
		,CREATE_TIME
		,MODIFY_TIME
		FROM
		ACCOUNT
		WHERE
		1=1
		<include refid="accountColumns" />
		ORDER BY
		Balance
		,ID
	</select>

	<select id="queryPaginationListByCoinTypeBalanceStatus" parameterType="PaginationCondition" resultMap="accountResultMap">
		SELECT
			ID
			,ADDRESS
			,COIN_TYPE
			,TOTAL_IN
			,TOTAL_OUT
			,BALANCE
			,FROZEN_AMOUNT
			,STATUS
			,CREATE_TIME
			,MODIFY_TIME
		FROM
			ACCOUNT
		WHERE
				COIN_TYPE = #{coinType}
			AND
				BALANCE > #{balance}
			AND
				STATUS = #{status}
		ORDER BY
			Balance
			,ID
	</select>

	<select id="queryPaginationListByCoinTypeSubCoinTypeBalanceSubBalance" parameterType="PaginationCondition" resultMap="accountResultMap">
		SELECT
			ADDRESS
		FROM
			ACCOUNT
		WHERE
				(COIN_TYPE = #{coinType} AND BALANCE >= #{balance} AND STATUS = #{status})
			OR
				(COIN_TYPE = #{subCoinType} AND BALANCE >= #{subBalance} AND STATUS = #{status})
		GROUP BY
			ADDRESS
		HAVING
			COUNT(ADDRESS)=2
	</select>
	
</mapper>

